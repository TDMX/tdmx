<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2006 U (http://www.altova.com) by Peter (- privat -) -->
<xs:schema xmlns="urn:tdmx:api:v1.0:sp:zas" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:common="urn:tdmx:api:v1.0:sp:common" xmlns:tx="urn:tdmx:api:v1.0:sp:tx" xmlns:msg="urn:tdmx:api:v1.0:sp:msg" targetNamespace="urn:tdmx:api:v1.0:sp:zas" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:annotation>
		<xs:documentation>This schema defines the request entities.</xs:documentation>
	</xs:annotation>
	<xs:import namespace="urn:tdmx:api:v1.0:sp:common" schemaLocation="../common.xsd"/>
	<xs:import namespace="urn:tdmx:api:v1.0:sp:tx" schemaLocation="../tx.xsd"/>
	<xs:import namespace="urn:tdmx:api:v1.0:sp:msg" schemaLocation="../msg.xsd"/>
	<!-- ********************************************* -->
	<!--   REQUEST AND RESPONSE TYPES                               -->
	<!---->
	<!-- ********************************************* -->
	<xs:complexType name="searchDomainRequestType">
		<xs:sequence>
			<xs:element name="filter" type="msg:DomainFilter"/>
			<xs:element ref="common:page"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="searchDomainResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge">
				<xs:sequence minOccurs="0">
					<xs:element ref="msg:domain" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element ref="common:page"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="createDomainRequestType">
		<xs:sequence>
			<xs:element ref="msg:domain"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="createDomainResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="deleteDomainRequestType">
		<xs:sequence>
			<xs:element ref="msg:domain"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="deleteDomainResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="searchAdministratorRequestType">
		<xs:sequence>
			<xs:element name="filter" type="msg:AdministratorFilter"/>
			<xs:element ref="common:page"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="searchAdministratorResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge">
				<xs:sequence minOccurs="0">
					<xs:element ref="msg:administrator" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element ref="common:page"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="createAdministratorRequestType">
		<xs:sequence>
			<xs:element ref="msg:administratorIdentity"/>
			<xs:element name="status" type="msg:credentialStatus" minOccurs="0">
				<xs:annotation>
					<xs:documentation>if present, the status of the administrator shall be set. Defaults to ACTIVE.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="whitelist" type="msg:IpAddressList" minOccurs="0">
				<xs:annotation>
					<xs:documentation>if present, the whitelist is replaced with the provided whitelist.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="createAdministratorResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="modifyAdministratorRequestType">
		<xs:annotation>
			<xs:documentation>modify the status or ipwhitelist of a user, the credential itself is immutable.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="msg:administratorIdentity"/>
			<xs:element name="status" type="msg:credentialStatus" minOccurs="0">
				<xs:annotation>
					<xs:documentation>if present, the status of the user shall be set.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="whitelist" type="msg:IpAddressList" minOccurs="0">
				<xs:annotation>
					<xs:documentation>if present, the whitelist is replaced with the provided whitelist.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="modifyAdministratorResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="deleteAdministratorRequestType">
		<xs:sequence>
			<xs:element ref="msg:administratorIdentity"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="deleteAdministratorResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="searchAddressRequestType">
		<xs:sequence>
			<xs:element name="filter" type="msg:AddressFilter"/>
			<xs:element ref="common:page"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="searchAddressResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge">
				<xs:sequence minOccurs="0">
					<xs:element ref="msg:address" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element ref="common:page"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="createAddressRequestType">
		<xs:sequence>
			<xs:element ref="msg:address"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="createAddressResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="deleteAddressRequestType">
		<xs:sequence>
			<xs:element ref="msg:address"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="deleteAddressResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="searchIpZoneRequestType">
		<xs:sequence>
			<xs:element name="name" type="msg:ipzonename" minOccurs="0"/>
			<xs:element ref="common:page"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="searchIpZoneResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge">
				<xs:sequence minOccurs="0">
					<xs:element name="ipzone" type="msg:IpZone" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element ref="common:page"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="createIpZoneRequestType">
		<xs:annotation>
			<xs:documentation>IpZones created by the Client are visible but not editable by all Administrators.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ipzone" type="msg:IpZone"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="createIpZoneResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="modifyIpZoneRequestType">
		<xs:annotation>
			<xs:documentation>modify the ipaddresses belonging to a zone.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ipzone" type="msg:IpZone"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="modifyIpZoneResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="deleteIpZoneRequestType">
		<xs:sequence>
			<xs:element name="name" type="msg:ipzonename"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="deleteIpZoneResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="searchUserRequestType">
		<xs:sequence>
			<xs:element name="filter" type="msg:UserFilter"/>
			<xs:element ref="common:page"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="searchUserResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge">
				<xs:sequence minOccurs="0">
					<xs:element ref="msg:user" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element ref="common:page"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="createUserRequestType">
		<xs:sequence>
			<xs:element ref="msg:userIdentity"/>
			<xs:element name="status" type="msg:credentialStatus" minOccurs="0">
				<xs:annotation>
					<xs:documentation>if present, the status of the user shall be set. Defaults to ACTIVE.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="whitelist" type="msg:IpAddressList" minOccurs="0">
				<xs:annotation>
					<xs:documentation>if present, the whitelist is replaced with the provided whitelist.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="createUserResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="modifyUserRequestType">
		<xs:annotation>
			<xs:documentation>modify the status or ipwhitelist of a user, the credential itself is immutable.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="msg:userIdentity"/>
			<xs:element name="status" type="msg:credentialStatus" minOccurs="0">
				<xs:annotation>
					<xs:documentation>if present, the status of the user shall be set.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="whitelist" type="msg:IpAddressList" minOccurs="0">
				<xs:annotation>
					<xs:documentation>if present, the whitelist is replaced with the provided whitelist.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="modifyUserResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="deleteUserRequestType">
		<xs:sequence>
			<xs:element ref="msg:userIdentity"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="deleteUserResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="searchServiceRequestType">
		<xs:sequence>
			<xs:element name="filter" type="msg:ServiceFilter"/>
			<xs:element ref="common:page"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="searchServiceResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge">
				<xs:sequence minOccurs="0">
					<xs:element ref="msg:service" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element ref="common:page"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="createServiceRequestType">
		<xs:sequence>
			<xs:element ref="msg:service"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="createServiceResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="deleteServiceRequestType">
		<xs:sequence>
			<xs:element ref="msg:service"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="deleteServiceResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="setChannelAuthorizationRequestType">
		<xs:sequence>
			<xs:element ref="msg:domain"/>
			<xs:element ref="msg:currentchannelauthorization"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="setChannelAuthorizationResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="deleteChannelAuthorizationRequestType">
		<xs:sequence>
			<xs:element ref="msg:domain"/>
			<xs:element name="channel" type="msg:Channel"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="deleteChannelAuthorizationResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="searchChannelRequestType">
		<xs:sequence>
			<xs:element name="filter" type="msg:ChannelAuthorizationFilter"/>
			<xs:element ref="common:page"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="searchChannelResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge">
				<xs:sequence minOccurs="0">
					<xs:element ref="msg:channelinfo" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element ref="common:page"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="searchDestinationRequestType">
		<xs:sequence>
			<xs:element name="filter" type="msg:ChannelDestinationFilter"/>
			<xs:element ref="common:page"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="searchDestinationResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge">
				<xs:sequence minOccurs="0">
					<xs:element ref="msg:destinationinfo" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element ref="common:page"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="listChannelMessageRequestType">
		<xs:annotation>
			<xs:documentation>TODO</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="domain" type="msg:domainname"/>
			<xs:element ref="msg:channel"/>
			<xs:element ref="common:page"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="listChannelMessageResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge">
				<xs:sequence minOccurs="0">
					<xs:element ref="msg:cms" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element ref="common:page"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="submitMessageRequestType">
		<xs:annotation>
			<xs:documentation>TODO</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="msg:domain"/>
			<xs:element ref="msg:msg"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="submitMessageResponseType">
		<xs:complexContent>
			<xs:extension base="common:ContinuedAcknowledge"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="uploadChunkRequestType">
		<xs:annotation>
			<xs:documentation>TODO</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="common:continuation" minOccurs="0"/>
			<xs:element ref="msg:chunk"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="uploadChunkResponseType">
		<xs:complexContent>
			<xs:extension base="common:ContinuedAcknowledge"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="receiveMessageRequestType">
		<xs:annotation>
			<xs:documentation>TODO</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="msg:msgId"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="receiveMessageResponseType">
		<xs:complexContent>
			<xs:extension base="common:ContinuedAcknowledge">
				<xs:sequence>
					<xs:element ref="msg:msg"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="downloadChunkRequestType">
		<xs:annotation>
			<xs:documentation>TODO</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="common:continuation" minOccurs="0"/>
			<xs:element ref="msg:chunkref"/>
			<xs:element ref="msg:msgId"/>
			<xs:element name="pos" type="xs:unsignedShort"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="downloadChunkResponseType">
		<xs:complexContent>
			<xs:extension base="common:ContinuedAcknowledge">
				<xs:sequence>
					<xs:element ref="msg:chunk"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="receiptMessageRequestType">
		<xs:annotation>
			<xs:documentation>TODO</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="msg:msgId"/>
			<xs:element ref="msg:receiptsignature"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="receiptMessageResponseType">
		<xs:complexContent>
			<xs:extension base="common:Acknowledge"/>
		</xs:complexContent>
	</xs:complexType>
	<!-- ********************************************* -->
	<!--   REQUEST AND RESPONSE ELEMENTS                                   -->
	<!--                                               -->
	<!-- ********************************************* -->
	<xs:element name="searchDomain" type="searchDomainRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC only. If a Domain is provided it must be within the Zone.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="searchDomainResponse" type="searchDomainResponseType"/>
	<xs:element name="createDomain" type="createDomainRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC only. Precondition: domain doesn't exist. Postcondition: domain exists.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="createDomainResponse" type="createDomainResponseType"/>
	<xs:element name="deleteDomain" type="deleteDomainRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC only. Precondition: no DACs, no Services, no Addresses. Postcondition: domain removed.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="deleteDomainResponse" type="deleteDomainResponseType"/>
	<xs:element name="searchAdministrator" type="searchAdministratorRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC only. If a Domain is provided it must be within the Zone.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="searchAdministratorResponse" type="searchAdministratorResponseType"/>
	<xs:element name="createAdministrator" type="createAdministratorRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC only. Precondition: DAC doesn't exist, Domain Exists. Postcondition: DAC exists.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="createAdministratorResponse" type="createAdministratorResponseType"/>
	<xs:element name="modifyAdministrator" type="modifyAdministratorRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC only. Precondition: DAC exists. Postcondition: DAC status modified.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="modifyAdministratorResponse" type="modifyAdministratorResponseType"/>
	<xs:element name="deleteAdministrator" type="deleteAdministratorRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC only. Precondition: DAC exists. Postcondition: DAC deleted.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="deleteAdministratorResponse" type="deleteAdministratorResponseType"/>
	<xs:element name="searchAddress" type="searchAddressRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC/DAC. DAC can only search for Addresses within own domain.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="searchAddressResponse" type="searchAddressResponseType"/>
	<xs:element name="createAddress" type="createAddressRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC/DAC. Precondition: Domain exists, Address doesn't exists. Postcondition: Address created.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="createAddressResponse" type="createAddressResponseType"/>
	<xs:element name="deleteAddress" type="deleteAddressRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC/DAC. Precondition: Address exists, no UCs exist. Postcondition: Address deleted</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="deleteAddressResponse" type="deleteAddressResponseType"/>
	<xs:element name="searchIpZone" type="searchIpZoneRequestType"/>
	<xs:element name="searchIpZoneResponse" type="searchIpZoneResponseType"/>
	<xs:element name="createIpZone" type="createIpZoneRequestType"/>
	<xs:element name="createIpZoneResponse" type="createIpZoneResponseType"/>
	<xs:element name="modifyIpZone" type="modifyIpZoneRequestType"/>
	<xs:element name="modifyIpZoneResponse" type="modifyIpZoneResponseType"/>
	<xs:element name="deleteIpZone" type="deleteIpZoneRequestType"/>
	<xs:element name="deleteIpZoneResponse" type="deleteIpZoneResponseType"/>
	<xs:element name="searchUser" type="searchUserRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC/DAC. DAC can only search for UCs within own domain.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="searchUserResponse" type="searchUserResponseType"/>
	<xs:element name="createUser" type="createUserRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC/DAC. Precondition: Address exists, UC doesn't exist. Postcondition: UC exists.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="createUserResponse" type="createUserResponseType"/>
	<xs:element name="modifyUser" type="modifyUserRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC/DAC. Precondition: UC exists. Postcondition: UC status modified.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="modifyUserResponse" type="modifyUserResponseType"/>
	<xs:element name="deleteUser" type="deleteUserRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC/DAC. Precondition: UC exists. Postcondition: UC deleted and all FlowTargets and Flows for existing ChannelAuthorizations are deleted.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="deleteUserResponse" type="deleteUserResponseType"/>
	<xs:element name="searchService" type="searchServiceRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC/DAC. DAC can only search for Services within own domain.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="searchServiceResponse" type="searchServiceResponseType"/>
	<xs:element name="createService" type="createServiceRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC/DAC. Precondition: Domain exists, Service doesn't exist. Postcondition: Service exists.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="createServiceResponse" type="createServiceResponseType"/>
	<xs:element name="deleteService" type="deleteServiceRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC/DAC. Precondition: Service exists, no ChannelAuthorizations exist. Postcondition: Service deleted.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="deleteServiceResponse" type="deleteServiceResponseType"/>
	<xs:element name="setChannelAuthorization" type="setChannelAuthorizationRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: DAC only. Precondition: the current ChannelAuthorization being set must "confirm" any pending send or receive authorization from the other endpoint. Allowing Receive only possible if the service exists. Postcondition: ChannelAuthorization created if not existing before. TODO:manages flow targets automatically, allows flow states to instantiate automatically.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="setChannelAuthorizationResponse" type="setChannelAuthorizationResponseType"/>
	<xs:element name="deleteChannelAuthorization" type="deleteChannelAuthorizationRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC/DAC. Precondition: the referenced ChannelAuthorization exists. manages flows and channelflowsession's automatically.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="deleteChannelAuthorizationResponse" type="deleteChannelAuthorizationResponseType"/>
	<xs:element name="searchChannel" type="searchChannelRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC/DAC. TODO</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="searchChannelResponse" type="searchChannelResponseType"/>
	<xs:element name="searchDestination" type="searchDestinationRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC/DAC. TODO</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="searchDestinationResponse" type="searchDestinationResponseType"/>
	<xs:element name="listChannelMessage" type="listChannelMessageRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC/DAC. TODO</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="listChannelMessageResponse" type="listChannelMessageResponseType"/>
	<xs:element name="submitMessage" type="submitMessageRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC/DAC. TODO</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="submitMessageResponse" type="submitMessageResponseType"/>
	<xs:element name="uploadChunk" type="uploadChunkRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC/DAC. TODO</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="uploadChunkResponse" type="uploadChunkResponseType"/>
	<xs:element name="receiveMessage" type="receiveMessageRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC/DAC. TODO</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="receiveMessageResponse" type="receiveMessageResponseType"/>
	<xs:element name="downloadChunk" type="downloadChunkRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC/DAC. TODO</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="downloadChunkResponse" type="downloadChunkResponseType"/>
	<xs:element name="receiptMessage" type="receiptMessageRequestType">
		<xs:annotation>
			<xs:documentation>Authorization: ZAC/DAC. TODO</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="receiptMessageResponse" type="receiptMessageResponseType"/>
</xs:schema>
