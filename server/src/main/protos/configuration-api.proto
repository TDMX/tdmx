// Copyright (c) 2010 Peter Klauser

option java_generic_services = true;
option java_package = "plugon.lib.configuration";
option java_outer_classname = "ConfigurationApi";

// This is default, but it's nice to be explicit
option optimize_for = SPEED;

enum PropertyType {
	STRING = 0;
	INTEGER = 1;
	LONG = 2;
	DAY = 3;
	DATE = 4;
}

message Property {
    required string name = 1;
	optional string value = 2; 
	optional PropertyType type = 3;
}


// RPC messages

message GetPropertyFilesRequest {
}

message GetPropertyFilesResponse {
	enum ErrorCode {
	  SUCCESS = 0;
	  FAILURE_TECHNICAL = 1;
	}
	required ErrorCode errorCode = 1;
	repeated string filename = 2;
}

message GetPropertiesRequest {
	optional string filename = 1;
}

message GetPropertiesResponse {
	enum ErrorCode {
	  SUCCESS = 0;
	  FAILURE_TECHNICAL = 1;
	  FAILURE_MISSING_INFO = 2;
	}
	required ErrorCode errorCode = 1;
    repeated Property properties = 2;
}

message SetPropertiesRequest {
	optional string filename = 1;
    repeated Property properties = 2;
}

message SetPropertiesResponse {
	enum ErrorCode {
	  SUCCESS = 0;
	  FAILURE_TECHNICAL = 1;
	  FAILURE_MISSING_INFO = 2;
	}
	required ErrorCode errorCode = 1;
}

// RPC service definition

service ConfigurationService {
    rpc getPropertyFiles(GetPropertyFilesRequest) returns (GetPropertyFilesResponse);
    rpc getProperties(GetPropertiesRequest) returns (GetPropertiesResponse);
    rpc setProperties(SetPropertiesRequest) returns (SetPropertiesResponse);
}
