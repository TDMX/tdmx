// Copyright (c) 2015 Peter Klauser

option java_generic_services = true;
option java_package = "org.tdmx.server.pcs.protobuf";
option java_outer_classname = "PCSServer";

import "broadcast.proto";

//
// SCS -> PCS to allocate WS-API sessions to clients
//

message AssociateApiSessionRequest {
	required SessionHandle handle = 1;
    required bytes pkixCertificate = 2;
}

message AssociateApiSessionResponse {
	optional string sessionId = 1;
	optional string httpsUrl = 2; 
    optional bytes serverCert = 3;
}

message SessionHandle {
	optional string segment = 1;
	optional string apiName = 2;
	optional string sessionKey = 3;
	repeated AttributeValue attribute = 4;
}


//
// WS -> PCS webservices register themselves at the PCS
//

message RegisterServerRequest {
	repeated ServiceHandle service = 1;
}

message RegisterServerResponse {
}


message ServiceHandle {
	optional string segment = 1;
	optional string apiName = 2;
	optional string httpsUrl = 3;
    optional bytes serverCert = 4;
}


//
// WS -> PCS webservice notify after idle timeout of client sessions.
//

message NotifySessionRemovedRequest {
	optional string apiName = 1;
	repeated string sessionId = 2;
}

message NotifySessionRemovedResponse {
}


//
// WS -> PCS webservice can invalidate the client certificate removal throughout the segment.
//

message InvalidateCertificateRequest {
    optional bytes clientCert = 1;
}

message InvalidateCertificateResponse {
}


//
// ROS -> PCS relay outbound servers register themselves at the PCS
//

message RegisterRelayServerRequest {
}

message RegisterRelayServerResponse {
}

//
// ROS -> PCS notify that a relay session is idle and stash the MRS sessionId for the channel.
//

message NotifyIdleRelaySessionRequest {
	optional Channel channel = 1;
	optional string mrsSessionId = 2;
}

message NotifyIdleSessionRelayResponse {
}

//
// ROS -> PCS periodic notification of load so that the PCS can do load balancing of relay sessions.
//

message NotifyLoadStatisticRequest {
	optional int32 loadValue = 1;
}

message NotifyLoadStatisticResponse {
}


service ControlServiceProxy {
    rpc associateApiSession(AssociateApiSessionRequest) returns (AssociateApiSessionResponse);
    rpc registerServer(RegisterServerRequest) returns (RegisterServerResponse);
    rpc notifySessionsRemoved(NotifySessionRemovedRequest) returns (NotifySessionRemovedResponse);
    rpc invalidateCertificate(InvalidateCertificateRequest) returns (InvalidateCertificateResponse);
//
// WS -> PCS relay message ( Out-Of-Band / Non RPC == Async )
//
    rpc registerRelayServer(RegisterRelayServerRequest) returns (RegisterRelayServerResponse);
    rpc notifyIdleRelaySession(NotifyIdleRelaySessionRequest) returns (NotifyIdleSessionRelayResponse);
    rpc notifyRelayLoadStatistic(NotifyLoadStatisticRequest) returns (NotifyLoadStatisticResponse);
}

